/*
 * Copyright (c) 2020 duckyb
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/outputs.h>

// Keycode Definitions
#define BR_QUOT KC_GRV  // '
#define BR_1    KC_1    // 1
#define BR_2    KC_2    // 2
#define BR_3    KC_3    // 3
#define BR_4    KC_4    // 4
#define BR_5    KC_5    // 5
#define BR_6    KC_6    // 6
#define BR_7    KC_7    // 7
#define BR_8    KC_8    // 8
#define BR_9    KC_9    // 9
#define BR_0    KC_0    // 0
#define BR_MINS KC_MINS // -
#define BR_EQL  KC_EQL  // =
#define BR_Q    KC_Q    // Q
#define BR_W    KC_W    // W
#define BR_E    KC_E    // E
#define BR_R    KC_R    // R
#define BR_T    KC_T    // T
#define BR_Y    KC_Y    // Y
#define BR_U    KC_U    // U
#define BR_I    KC_I    // I
#define BR_O    KC_O    // O
#define BR_P    KC_P    // P
#define BR_ACUT KC_LBRC // ´ (dead)
#define BR_LBRC KC_RBRC // [
#define BR_A    KC_A    // A
#define BR_S    KC_S    // S
#define BR_D    KC_D    // D
#define BR_F    KC_F    // F
#define BR_G    KC_G    // G
#define BR_H    KC_H    // H
#define BR_J    KC_J    // J
#define BR_K    KC_K    // K
#define BR_L    KC_L    // L
#define BR_CCED KC_SCLN // Ç
#define BR_TILD KC_QUOT // ~ (dead)
#define BR_RBRC KC_BSLS // ]
#define BR_BSLS KC_NUBS // (backslash)
#define BR_Z    KC_Z    // Z
#define BR_X    KC_X    // X
#define BR_C    KC_C    // C
#define BR_V    KC_V    // V
#define BR_B    KC_B    // B
#define BR_N    KC_N    // N
#define BR_M    KC_M    // M
#define BR_COMM KC_COMM // ,
#define BR_DOT  KC_DOT  // .
#define BR_SCLN KC_SLSH // ;
#define BR_SLSH KC_INT1 // /
#define BR_PDOT KC_PCMM // .
#define BR_PCMM KC_PDOT // ,
#define BR_DQUO S(BR_QUOT) // "
#define BR_EXLM S(BR_1)    // !
#define BR_AT   S(BR_2)    // @
#define BR_HASH S(BR_3)    // #
#define BR_DLR  S(BR_4)    // $
#define BR_PERC S(BR_5)    // %
#define BR_DIAE S(BR_6)    // ¨ (dead)
#define BR_AMPR S(BR_7)    // &
#define BR_ASTR S(BR_8)    // *
#define BR_LPRN S(BR_9)    // (
#define BR_RPRN S(BR_0)    // )
#define BR_UNDS S(BR_MINS) // _
#define BR_PLUS S(BR_EQL)  // +
#define BR_GRV  S(BR_ACUT) // ` (dead)
#define BR_LCBR S(BR_LBRC) // {
#define BR_CIRC S(BR_TILD) // ^ (dead)
#define BR_RCBR S(BR_RBRC) // }
#define BR_PIPE S(BR_BSLS) // |
#define BR_LABK S(BR_COMM) // <
#define BR_RABK S(BR_DOT)  // >
#define BR_COLN S(BR_SCLN) // :
#define BR_QUES S(BR_SLSH) // ?
#define BR_SUP1 ALGR(BR_1)    // ¹
#define BR_SUP2 ALGR(BR_2)    // ²
#define BR_SUP3 ALGR(BR_3)    // ³
#define BR_PND  ALGR(BR_4)    // £
#define BR_CENT ALGR(BR_5)    // ¢
#define BR_NOT  ALGR(BR_6)    // ¬
#define BR_SECT ALGR(BR_EQL)  // §
#define BR_DEG  ALGR(BR_E)    // °
#define BR_FORD ALGR(BR_LBRC) // ª
#define BR_MORD ALGR(BR_RBRC) // º
#define BR_CRUZ ALGR(BR_C)    // ₢

// Layer definitions
#define BASE 0
#define SYM 1
#define EXT 2
#define FNC 3
#define SYM2 4
#define ACCENT 5
#define SETTINGS 6
// -----------------


/*
&sk {
    // don't release mods on other mods presses
    ignore-modifiers;
};
*/

/ {
    behaviors {
        // Enables holding the first mod-tap key
        // by performing a tap-release-hold sequence.
        // To use it: "&qt KEYCODE1 KEYCODE2"
        qt: quick_tap {
            compatible = "zmk,behavior-hold-tap";
            label = "QUICK_TAP";
            #binding-cells = <2>;
            flavor = "hold-preferred";
            tapping-term-ms = <200>;
            quick-tap-ms = <200>;
            bindings = <&kp>, <&kp>;
        };
    };

    macros {
        // sometimes my device thinks a modifier is being held down
        // pressing all modifiers fixes it.
        unstick: unstick {
            label = "ZM_unstick";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LSHIFT &kp RSHIFT &kp LCTRL &kp RCTRL &kp LALT &kp RALT &kp LGUI &kp RGUI>;
        };
    };

    combos {
        compatible = "zmk,combos";
        // both right thumb keys
        combo_accent {
            timeout-ms = <200>;
            key-positions = <32 33>;
            bindings = <&mo ACCENT>;
        };
        // internal-left & external-right thumb keys
        combo_sym2 {
            timeout-ms = <200>;
            key-positions = <31 33>;
            bindings = <&mo SYM2>;
        };
        // both left thumb keys
        combo_settings {
            timeout-ms = <200>;
            key-positions = <30 31>;
            bindings = <&mo SETTINGS>;
        };
        // left index & middle fingers (home-row)
        // hold control & space for Adobe workflow
        combo_ctrl_space {
            timeout-ms = <200>;
            key-positions = <12 13>;
            bindings = <&kp LC(SPACE)>;
            layers = <BASE>;
        };
    };

    keymap {
        compatible = "zmk,keymap";
        // Base alpha layer
        default_layer {
            label = "Base";
            bindings = <
                &kp BR_Q &kp BR_W &kp BR_E &kp BR_R &kp BR_T           &kp BR_Y &kp BR_U  &kp BR_I     &kp BR_O   &kp BR_P 
                &kp BR_A &kp BR_S &kp BR_D &kp BR_F &kp BR_G           &kp BR_H &kp BR_J  &kp BR_K     &kp BR_L &kp BR_CCED
                &kp BR_Z &kp BR_X &kp BR_C &kp BR_V &kp BR_B           &kp BR_N &kp BR_M  &kp BR_COMM &kp BR_DOT &kp BR_SCLN
                &mo EXT &qt LSHIFT SPACE           &kp SPACE &sl SYM
            >;
        };

        // Numbers and high frequency symbols
        sym_layer {
            label = "Sym.";
            bindings = <
                &kp BR_1 &kp BR_2 &kp BR_3 &kp BR_4 &kp BR_5                                &kp BR_6 &kp BR_7 &kp BR_8 &kp BR_9 &kp BR_0
                &kp BR_LABK &kp BR_AT &kp BR_LPRN &kp BR_LCBR &kp BR_LBRC           &kp BR_EQL &kp BR_QUES &kp BR_DQUO &kp BR_PLUS &kp BR_ASTR
                &kp BR_RABK &kp BR_USD &kp BR_RPRN &kp BR_RCBR &kp BR_RBRC          &kp BR_PERC &kp BR_EXLM &kp BR_QUOT &kp BR_MINUS &kp BR_SLSH
                              &mo FNC &mo SYM2                                          &trans &trans
            >;
        };

        // Main modifiers and arrow keys
        ext_layer {
            label = "Mods";
            bindings = <
                &kp ESC &kp C_PREV &kp C_PP &kp C_NEXT &kp C_PAUSE     &kp PG_UP &kp HOME &kp UP &kp END &kp CAPS
                &sk LALT &sk LGUI &sk LSHIFT &sk LCTRL &kp RALT        &kp PG_DN &kp LEFT &kp DOWN &kp RIGHT &kp DEL
                &kp LC(BR_Z) &kp LC(BR_X) &kp LC(BR_C) &kp TAB &kp LC(BR_V)    &kp LC(BSPC) &kp BSPC &trans &trans &trans
                &trans &kp LCTRL    &kp ENTER  &mo FNC 
            >;
        };

        // Function keys with modifiers
        fnc_layer {
            label = "FRow";
            bindings = <
                &kp F1 &kp F2 &kp F3 &kp F4 &kp F5                     &kp F6 &kp F7 &kp F8 &kp F9 &kp F10 
                &sk LALT &sk LGUI &sk LSHIFT &sk LCTRL &kp RALT        &kp F11 &kp F12 &kp PRINTSCREEN &trans &trans
                &none &none &none &none &none                         &none &none &none &none &none 
                &none &none              &none &none  
            >;
        };

        // Low frequency symbols.
        symbols_2_layer {
            label = "Sym.2";
            bindings = <
                &kp BR_CIRC &kp BR_UNDS &kp BR_PND &kp BR_EUR &kp BR_HASH         &none &none &none &none &none 
                &kp BR_GRV &kp BR_TILD &kp BR_BSLS &kp BR_PIPE &kp BR_AMPR         &none &none &none &none &none
                &none &none &kp BR_SECT &kp BR_CCED &kp BR_DEG            &none &none &none &none &none
                &none &none                                                &none &none 
            >;
        };

        // Used to type regional accents.
        accent_layer {
            label = "Accent";
            bindings = <
                &none &none &none &kp BR_DIAE &none                         &none &none &none &none &none 
                &kp BR_ACUT &kp BR_AGRV &kp BR_CIRC &kp BR_TILD &none       &none &none &none &none &none
                &none &none &none &kp BR_GRV &none                         &none &none &none &none &none
                &none &none                         &none &none 
            >;
        };

        // Used to change the keyboard's settings.
        settings_layer {
                label = "Sett.";
                bindings = <
                &bootloader &none &none &bt BT_CLR &bt BT_SEL 0               &bt BT_SEL 3 &none &unstick &none &bootloader 
                &none &none &none &none      &bt BT_SEL 1                         &bt BT_SEL 4 &none &none &none &none
                &none &none &none &none      &bt BT_SEL 2               &bt BT_SEL 5 &none &none &none &none
                &none &none                         &none &none 
            >;
        };
    };
};







